package planner;


/**
 * <p>
 * An immutable class representing a venue in the municipality.
 * </p>
 *
 * <p>
 * A venue has a name and a capacity. The capacity of the venue is an integer
 * greater than zero that represents the maximum number of people who can attend
 * the venue at the same time for an event. A venue can only host events with a
 * size less than or equal to its capacity.
 * </p>
 *
 * <p>
 * Hosting an event at a venue generates traffic on some traffic corridors in
 * the municipality.
 * </p>
 *
 * <p>
 * The amount of traffic that is generated on each corridor is - except for
 * integer truncation - linearly proportional to the size of the event: if an
 * event of maximum size C for the venue would generate traffic X on a corridor,
 * then an event of size K would generate (K*X)/C traffic on that corridor.
 * (Note that the integer division truncates the decimal places of the
 * division.)
 * </p>
 */
public class Venue {

	private String name;  // venue name
	private int capacity; // venue capacity
	private Traffic capacityTraffic; // traffic generated by venue
	/*
	 * Invariant: Traffic and name are never equal to null
	 * Venue capacity is greater than zero but less than or equal to
	 * maximum event size
	 */

	/**
	 * Creates a new venue with the given name, and capacity, that generates the
	 * traffic described by parameter capacityTraffic for an event of size
	 * capacity at the venue.
	 *
	 * @param name
	 *            the name of the venue
	 * @param capacity
	 *            the capacity of the venue
	 * @param capacityTraffic
	 *            the traffic generated by hosting an event of size capacity at
	 *            the venue
	 *
	 * @throws NullPointerException
	 *             if either name or capacityTraffic are null
	 * @throws IllegalArgumentException
	 *             if capacity is less than or equal to zero.
	 * @throws InvalidTrafficException
	 *             if the traffic on any corridor described by capacityTraffic
	 *             is greater than the capacity of the venue (i.e. you can't
	 *             generate more traffic for a corridor than you have people at
	 *             the venue.)
	 */
	public Venue(String name, int capacity, Traffic capacityTraffic) {
		if (name == null || capacityTraffic == null) {
			throw new NullPointerException("name or capacityTraffic are null");
		} else if (capacity <= 0) {
			throw new IllegalArgumentException("capacity <= 0");
		}
		for (Corridor entry : capacityTraffic.getCorridorsWithTraffic()) {
			if (capacityTraffic.getTraffic(entry) > capacity) {
				throw new InvalidTrafficException("traffic exceeds "
						+ "venue capacity");
			}
		}
		this.name = name;
		this.capacity = capacity;
		this.capacityTraffic = capacityTraffic;
	}

	/**
	 * Returns the name of the venue.
	 *
	 * @return the name of the venue
	 */
	public String getName() {
		return this.name;
	}

	/**
	 * Returns the capacity of the venue.
	 *
	 * @return the capacity of the venue
	 */
	public int getCapacity() {
		return this.capacity;
	}

	/**
	 * Returns true if the size of the event is less than or equal to the
	 * capacity of the venue, and false otherwise.
	 *
	 * @param event
	 *            the event whose compatibility with this venue will be checked
	 * @return true if the capacity of the venue is greater than or equal to
	 *         the size of the event.
	 * @throws NullPointerException
	 *             if event is null
	 */
	public boolean canHost(Event event) {
		if (event == null) {
			throw new NullPointerException("event = null");
		} else if (this.capacity >= event.getSize()) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 * <p>
	 * Returns the amount of traffic that would be generated by hosting the
	 * given event at this venue.
	 * </p>
	 *
	 * <p>
	 * For each corridor c, the traffic generated by the event on that corridor
	 * is defined to be the integer ((K * X) / C), where K is the size of the
	 * event, C is the capacity of this venue and X is the traffic generated by
	 * an event of size C at this venue on corridor c.
	 * </p>
	 *
	 * <p>
	 * (This definition means that the amount of traffic that is generated on
	 * each corridor is - except for the integer truncation - linearly
	 * proportional to the size of the event.)
	 * </p>
	 *
	 * @param event
	 *            the event for which the traffic will be generated
	 * @return the traffic generated by hosting the given event at this venue
	 * @throws NullPointerException
	 *             if event is null
	 * @throws IllegalArgumentException
	 *             if the size of the event exceeds the capacity of the venue
	 */
	public Traffic getTraffic(Event event) {
		int generated;
		Traffic temp = new Traffic();
		if (event == null) {
			throw new NullPointerException("event is null");
		} else if (event.getSize() > this.capacity) {
			throw new IllegalArgumentException("size of the event exceeds"
					+ " venue capacity");
		}
		for (Corridor corridor : capacityTraffic.getCorridorsWithTraffic()) {
			//traffic generated by the event for corridor ((K * X) / C)
			generated = event.getSize() * capacityTraffic.getTraffic(corridor)
					/ this.capacity;
			temp.updateTraffic(corridor, generated);
		}
		return temp;
	}

	/**
	 * The string representation of a venue is a string of the form <br>
	 * <br>
	 *
	 * "NAME (CAPACITY)" + LINE_SEPARATOR + "CAPACITYTRAFFIC"<br>
	 * <br>
	 *
	 * where NAME is the name of the venue, CAPACITY is the capacity of the
	 * venue, LINE_SEPARATOR is the line separator retrieved in a
	 * machine-independent way by calling System.getProperty("line.separator"),
	 * and CAPACITYTRAFFIC is the toString() representation of the Traffic
	 * object describing the traffic generated by hosting an event of size
	 * capacity at the venue.
	 */
	@Override
	public String toString() {
		final String LINE_SEPARATOR = System.getProperty("line.separator");
		return name + " (" + capacity + ")" + LINE_SEPARATOR
				+ capacityTraffic.toString();
	}

	/**
	 * Returns true if and only if the given object
	 *
	 * (i) is an instance of the class Venue
	 *
	 * (ii) with a name that is equal to this venue's name (according to the
	 * equals method of the String class),
	 *
	 * (iii) a capacity that is equal to this venue's capacity and
	 *
	 * (iv) generates the same traffic as this venue for an event of maximum
	 * size (capacity) at the venue. (The amount of traffic generated is the
	 * same if it is the same according to the sameTraffic() method of the
	 * Traffic class).
	 *
	 */
	@Override
	public boolean equals(Object object) {
		Event temp = new Event("trial", this.getCapacity());
		if (!(object instanceof Venue)) {
			return false;
		} else if (!((Venue)object).getName().equals(this.getName())) {
			// unequal venue names
			return false;
		} else if (((Venue)object).getCapacity() != this.getCapacity()) {
			// capacity that is unequal to this venue's capacity
			return false;
		} else if (!((Venue)object).getTraffic(temp).sameTraffic(
				this.getTraffic(temp))) {
			// does not generate the same traffic as this venue
			// for a max capacity event
			return false;
		} else {
			return true;
		}
	}

	/**
	 * The following hash code override method computes a hash code
	 * for each property that defines the Venue object and adds
	 * it to the final hash code
	 */
	@Override
	public int hashCode() {
		int hash = 7; //default primary number
		hash = 19*hash + name.hashCode();
		hash = 19*hash + capacity;
		hash = 19*hash + this.capacityTraffic.toString().hashCode();
		return hash;
	}

	/**
	 * <p>
	 * Determines whether this class is internally consistent (i.e. it satisfies
	 * its class invariant).
	 * </p>
	 *
	 * <p>
	 * NOTE: This method is only intended for testing purposes.
	 * </p>
	 *
	 * @return true if this class is internally consistent, and false otherwise.
	 */
	public boolean checkInvariant() {
		if (name == null || capacityTraffic == null) {
			return false;
		} else if (capacity <= 0) {
			return false;
		} else {
			return true;
		}
	}

}
